name: 'Build And Deploy Stage'

on:
  push:
    branches:
      - stage

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  # Builds the application for production.
  # You should configure this environment as close as possible to the production environment, e.g. using Ubuntu for Linux apps, using the same Node version
  build:
    runs-on: ubuntu-latest
    environment: stage
    env:
      TARGET: 'stage'
      VITE_API_BASE_URL: '${{ vars.VITE_API_BASE_URL }}'
      VITE_AVIATION_APPLICATION_BASE_URL: '${{ vars.VITE_AVIATION_APPLICATION_BASE_URL }}'
      VITE_AVIATION_API_BASE_URL: '${{ vars.VITE_AVIATION_API_BASE_URL }}'
      VITE_AVIATION_API_KEY_CODE: '${{ secrets.VITE_AVIATION_API_KEY_CODE }}'
      VITE_API_KEY_CODE: '${{ secrets.VITE_API_KEY_CODE }}'
      VITE_AUTHORIZATION_REALM: '${{ secrets.VITE_AUTHORIZATION_REALM }}'
      VITE_AUTHORIZATION_AUTHSERVERURL: '${{ vars.VITE_AUTHORIZATION_AUTHSERVERURL }}'
      VITE_ENABLE_AUTHORIZATION: '${{ vars.VITE_ENABLE_AUTHORIZATION }}'
      VITE_WILDFIRE_PORTAL_URL: '${{ vars.VITE_WILDFIRE_PORTAL_URL }}'
      VITE_BUILD_NUMBER: '${{ github.run_number  }}'
      VITE_WEB_VERSION: '${{ vars.VITE_WEB_VERSION }}'
      VITE_FINANCE_NAV_ENABLED: '${{ vars.VITE_FINANCE_NAV_ENABLED }}'
      VITE_ENVIRONMENT: 'stage'

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Install dependencies, build, and test
        run: |
          npm install
          npm run build --if-present
          npm run test --if-present
        # Other scripts if configured should be added here, such as linting, formating

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: node-app
          path: dist # This should be your distribution path, not the root path

  # Deploy the application to Azure
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: stage
    env:
      TARGET: 'stage'
      ARM_CLIENT_ID: '${{ secrets.ARM_CLIENT_ID }}'
      ARM_SUBSCRIPTION_ID: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
      ARM_TENANT_ID: '${{ secrets.ARM_TENANT_ID }}'
      ARM_CLIENT_SECRET: '${{ secrets.ARM_CLIENT_SECRET }}'

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: node-app

      - name: Azure login
        run: |
          set -a 
          az login --service-principal \
            -u "${{ secrets.ARM_CLIENT_ID }}" \
            -p "${{ secrets.ARM_CLIENT_SECRET }}" \
            --tenant "${{ secrets.ARM_TENANT_ID }}"

      - name: Purge blob storage
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob delete-batch --account-name wcdsweb${{ env.TARGET }} --auth-mode key -s '$web'

      - name: Upload to blob storage
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload-batch --account-name wcdsweb${{ env.TARGET }} --auth-mode key -d '$web' -s .

      - name: Purge CDN endpoint
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az cdn endpoint purge --subscription "${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            --content-paths  "/*" \
            --profile-name "wcds-web-profile-${{ env.TARGET }}" \
            --name "wcds-web-${{ env.TARGET }}" \
            --resource-group "goa-cc-wdp-rg-wcds-web-${{ env.TARGET }}"

      # Azure logout
      - name: logout
        run: |
          az logout
        if: always()
