name: 'Web Build/Deloy'

on:
  push:
    branches:
    - dev

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
 # Builds the application for production. 
 # You should configure this environment as close as possible to the production environment, e.g. using Ubuntu for Linux apps, using the same Node version
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Install dependencies, build, and test
        run: |
          npm install
          npm run build --if-present
          npm run test --if-present
         # Other scripts if configured should be added here, such as linting, formating

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: node-app
          path: dist # This should be your distribution path, not the root path
 
 # Deploy the application to Azure
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: dev
    env:
      ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
      ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
      ARM_SKIP_PROVIDER_REGISTRATION: true
      TF_VERSION: 1.5.7
 
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: node-app

      - name: Azure login
        run: |
          set -a 
          az login --service-principal \
            -u "${{ secrets.ARM_CLIENT_ID }}" \
            -p "${{ secrets.ARM_CLIENT_SECRET }}" \
            --tenant "${{ secrets.ARM_TENANT_ID }}"
  
      - name: Upload to blob storage
        uses: azure/CLI@v1
        with:
          inlineScript: |
              az storage blob upload-batch --account-name wcdsstorageweb --auth-mode login -d '$web' -s .
      
      # - name: Purge CDN endpoint
      #   uses: azure/CLI@v1
      #   with:
      #     inlineScript: |
      #        az cdn endpoint purge --content-paths  "/*" --profile-name  --name "CDN_ENDPOINT" --resource-group "RESOURCE_GROUP"

  # Azure logout
      - name: logout
        run: |
              az logout
        if: always()
